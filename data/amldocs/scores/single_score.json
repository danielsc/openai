{
    "query": "What is a pipeline?",
    "result": "In the context of Azure Machine Learning, a pipeline is a platform service that allows you to create, manage, and run entire workflows that usually include data preparation, model training, and deployment. With machine learning pipelines, you can define a series of repeatable steps to prepare your data, train your models, deploy your models, and manage your models' versions. You can automate various steps in the machine learning lifecycle, and machine learning pipelines can help you manage experiments and model versions.",
    "context": [
        {
            "page_content": "\n# MLOps: Model management, deployment, and monitoring with Azure Machine Learning\n\n[!INCLUDE [dev v2](../../includes/machine-learning-dev-v2.md)]\n\n> [!div class=\"op_single_selector\" title1=\"Select the version of Azure Machine Learning developer platform you are using:\"]\n> * [v1](./v1/concept-model-management-and-deployment.md)\n> * [v2 (current version)](concept-model-management-and-deployment.md)\n\nIn this article, learn how to apply Machine Learning Operations (MLOps) practices in Azure Machine Learning for the purpose of managing the lifecycle of your models. Applying MLOps practices can improve the quality and consistency of your machine learning solutions. \n\n## What is MLOps?\n\nMLOps is based on [DevOps](https://azure.microsoft.com/overview/what-is-devops/) principles and practices that increase the efficiency of workflows. Examples include continuous integration, delivery, and deployment. MLOps applies these principles to the machine learning process, with the goal of:\n\n* Faster experimentation and development of models.\n* Faster deployment of models into production.\n* Quality assurance and end-to-end lineage tracking.\n\n## MLOps in Machine Learning\n\nMachine Learning provides the following MLOps capabilities:\n\n- **Create reproducible machine learning pipelines.** Use machine learning pipelines to define repeatable and reusable steps for your data preparation, training, and scoring processes.\n- **Create reusable software environments.** Use these environments for training and deploying models.\n- **Register, package, and deploy models from anywhere.** You can also track associated metadata required to use the model.\n- **Capture the governance data for the end-to-end machine learning lifecycle.** The logged lineage information can include who is publishing models and why changes were made. It can also include when models were deployed or used in production.\n- **Notify and alert on events in the machine learning lifecycle.** Event examples include experiment completion, model registration, model deployment, and data drift detection.\n- **Monitor machine learning applications for operational and machine learning-related issues.** Compare model inputs between training and inference. Explore model-specific metrics. Provide monitoring and alerts on your machine learning infrastructure.\n- **Automate the end-to-end machine learning lifecycle with Machine Learning and Azure Pipelines.** By using pipelines, you can frequently update models. You can also test new models. You can continually roll out new machine learning models alongside your other applications and services.\n\nFor more information on MLOps, see [Machine learning DevOps](/azure/cloud-adoption-framework/ready/azure-best-practices/ai-machine-learning-mlops).\n\n## Create reproducible machine learning pipelines\n\nUse machine learning pipelines from Machine Learning to stitch together all the steps in your model training process.\n\nA machine learning pipeline can contain steps from data preparation to feature extraction to hyperparameter tuning to model evaluation. For more information, see [Machine learning pipelines](concept-ml-pipelines.md).\n\nIf you use the [designer](concept-designer.md) to create your machine learning pipelines, you can at any time select the **...** icon in the upper-right corner of the designer page. Then select **Clone**. When you clone your pipeline, you iterate your pipeline design without losing your old versions.\n\n## Create reusable software environments\n\nBy using Machine Learning environments, you can track and reproduce your projects' software dependencies as they evolve. You can use environments to ensure that builds are reproducible without manual software configurations.\n\nEnvironments describe the pip and conda dependencies for your projects. You can use them for training and deployment of models. For more information, see [What are Machine Learning environments?](concept-environments.md).\n\n## Register, package, and deploy models from anywhere\n\nThe following sections discuss how to register, package, and deploy models.\n",
            "metadata": {
                "sourcefile": "UI/2023-04-06_191207_UTC/simple-4000-100/concept-model-management-and-deployment-0.md"
            }
        },
        {
            "page_content": "* [Configure a development environment for Azure Machine Learning](how-to-configure-environment.md)\n\n### Submit a command\n\nA generic training job with Azure Machine Learning can be defined using the [command()](/python/api/azure-ai-ml/azure.ai.ml#azure-ai-ml-command). The command is then used, along with your training script(s) to train a model on the specified compute target.\n\nYou may start with a command for your local computer, and then switch to one for a cloud-based compute target as needed. When changing the compute target, you only change the compute parameter in the command that you use. A run also logs information about the training job, such as the inputs, outputs, and logs.\n\n* [Tutorial: Train your first ML model](tutorial-1st-experiment-sdk-train.md)\n* [Examples: Jupyter Notebook and Python examples of training models](https://github.com/Azure/azureml-examples)\n\n### Automated Machine Learning\n\nDefine the iterations, hyperparameter settings, featurization, and other settings. During training, Azure Machine Learning tries different algorithms and parameters in parallel. Training stops once it hits the exit criteria you defined.\n\n> [!TIP]\n> In addition to the Python SDK, you can also use Automated ML through [Azure Machine Learning studio](https://ml.azure.com).\n\n* [What is automated machine learning?](concept-automated-ml.md)\n* [Tutorial: Create your first classification model with automated machine learning](tutorial-first-experiment-automated-ml.md)\n* [How to: Configure automated ML experiments in Python](how-to-configure-auto-train.md)\n* [How to: Create, explore, and deploy automated machine learning experiments with Azure Machine Learning studio](how-to-use-automated-ml-for-ml-models.md)\n\n### Machine learning pipeline\n\nMachine learning pipelines can use the previously mentioned training methods. Pipelines are more about creating a workflow, so they encompass more than just the training of models. \n\n* [What are ML pipelines in Azure Machine Learning?](concept-ml-pipelines.md)\n* [Tutorial: Create production ML pipelines with Python SDK v2 in a Jupyter notebook](tutorial-pipeline-python-sdk.md)\n\n\n### Understand what happens when you submit a training job\n\nThe Azure training lifecycle consists of:\n\n1. Zipping the files in your project folder and upload to the cloud.\n    \n    > [!TIP]\n    > [!INCLUDE [amlinclude-info](../../includes/machine-learning-amlignore-gitignore.md)]\n\n1. Scaling up your compute cluster \n1. Building or downloading the dockerfile to the compute node \n    1. The system calculates a hash of: \n        - The base image \n        - Custom docker steps (see [Deploy a model using a custom Docker base image](./how-to-deploy-custom-container.md))\n        - The conda definition YAML (see [Manage Azure Machine Learning environments with the CLI (v2)](how-to-manage-environments-v2.md)))\n    1. The system uses this hash as the key in a lookup of the workspace Azure Container Registry (ACR)\n    1. If it is not found, it looks for a match in the global ACR\n    1. If it is not found, the system builds a new image (which will be cached and registered with the workspace ACR)\n1. Downloading your zipped project file to temporary storage on the compute node\n1. Unzipping the project file\n1. The compute node executing `python <entry script> <arguments>`\n1. Saving logs, model files, and other files written to `./outputs` to the storage account associated with the workspace\n1. Scaling down compute, including removing temporary storage \n\n\n## Azure Machine Learning designer\n\nThe designer lets you train models using a drag and drop interface in your web browser.\n\n+ [What is the designer?](concept-designer.md)\n+ [Tutorial: Predict automobile price](tutorial-designer-automobile-price-train-score.md)\n\n## Azure CLI\n\nThe machine learning CLI is an extension for the Azure CLI. It provides cross-platform CLI commands for working with Azure Machine Learning. Typically, you use the CLI to automate tasks, such as training a machine learning model.\n",
            "metadata": {
                "sourcefile": "UI/2023-04-06_191207_UTC/simple-4000-100/concept-train-machine-learning-model-30.md"
            }
        },
        {
            "page_content": "The Azure cloud provides several types of pipeline, each with a different purpose. The following table lists the different pipelines and what they're used for:\n\n| Scenario | Primary persona | Azure offering | OSS offering | Canonical pipe | Strengths |\n| -------- | --------------- | -------------- | ------------ | -------------- | --------- |\n| Model orchestration (Machine learning) | Data scientist | Azure Machine Learning Pipelines | Kubeflow Pipelines | Data -> Model | Distribution, caching, code-first, reuse | \n| Data orchestration (Data prep) | Data engineer | [Azure Data Factory pipelines](../data-factory/concepts-pipelines-activities.md) | Apache Airflow | Data -> Data | Strongly typed movement, data-centric activities |\n| Code & app orchestration (CI/CD) | App Developer / Ops | [Azure Pipelines](https://azure.microsoft.com/services/devops/pipelines/) | Jenkins | Code + Model -> App/Service | Most open and flexible activity support, approval queues, phases with gating |\n\n## Next steps\n\nAzure Machine Learning pipelines are a powerful facility that begins delivering value in the early development stages.\n\n+ [Define pipelines with the Azure ML CLI v2](./how-to-create-component-pipelines-cli.md)\n+ [Define pipelines with the Azure ML SDK v2](./how-to-create-component-pipeline-python.md)\n+ [Define pipelines with Designer](./how-to-create-component-pipelines-ui.md)\n+ Try out [CLI v2 pipeline example](https://github.com/Azure/azureml-examples/tree/sdk-preview/cli/jobs/pipelines-with-components)\n+ Try out [Python SDK v2 pipeline example](https://github.com/Azure/azureml-examples/tree/main/sdk/python/jobs/pipelines)\n",
            "metadata": {
                "sourcefile": "UI/2023-04-06_191207_UTC/simple-4000-100/concept-ml-pipelines-41.md"
            }
        }
    ]
}